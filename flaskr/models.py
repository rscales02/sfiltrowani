# coding=utf-8
"""
create database models
"""
from flaskr import db, login, app
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import UserMixin
from hashlib import md5
from time import time
import jwt
from flask_babel import _

followers = db.Table(
    'followers',
    db.Column('follower_id', db.Integer, db.ForeignKey('user.id')),
    db.Column('followed_id', db.Integer, db.ForeignKey('user.id'))
)


class User(UserMixin, db.Model):
    """
    define User database model class
    """
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    password_hash = db.Column(db.String(128))
    posts = db.relationship('Post', backref='author', lazy='dynamic')
    about_me = db.Column(db.String(140))
    last_seen = db.Column(db.DateTime, default=datetime.utcnow())
    followed = db.relationship(
        'User', secondary=followers,
        primaryjoin=(followers.c.follower_id == id),
        secondaryjoin=(followers.c.followed_id == id),
        backref=db.backref('followers', lazy='dynamic'),
        lazy='dynamic'
    )

    # define how class prints
    def __repr__(self):
        return '<User {}>'.format(self.username)

    def set_password(self, password):
        """
        set User password
        :param password: expects string
        :return: none
        """
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        """
        check user password
        :param password: expects string
        :return: none
        """
        return check_password_hash(self.password_hash, password)

    def avatar(self, size):
        """
        generate user avatar
        :param size: expects int for size of avatar
        :return: returns a formatted avatar image
        """
        digest = md5(self.email.lower().encode('utf-8')).hexdigest()
        return 'https://www.gravatar.com/avatar/{}?d=identicon&s={}'.format(digest, size)

    def follow(self, user):
        """
        allow user to follow other users
        :param user: expects valid username string
        :return: none
        """
        if not self.is_following(user):
            self.followed.append(user)

    def unfollow(self, user):
        """
        allow users to un-follow other users
        :param user: expects valid username string
        :return: none
        """
        if self.is_following(user):
            self.followed.remove(user)

    def is_following(self, user):
        """
        allows user to see number of followers following them
        :param user: expects valid username string
        :return: count of followers
        """
        return self.followed.filter(followers.c.followed_id == user.id).count() > 0

    def followed_posts(self):
        """
        allows user to see list of followed posts
        :return: returns list of followed posts ordered by timestamp
        """
        followed = Post.query.join(
            followers, (followers.c.followed_id == Post.user_id)).filter(
                followers.c.follower_id == self.id)
        own = Post.query.filter_by(user_id=self.id)
        return followed.union(own).order_by(Post.timestamp.desc())

    def get_reset_password_token(self, expires_in=1200):
        """
        send password reset token
        :param expires_in: length of time in seconds before token expires
        :return: encoded password reset token
        """
        return jwt.encode(
            {'reset_password': self.id, 'exp': time() + expires_in},
            app.config['SECRET_KEY'], algorithm='HS256').decode('utf-8')

    @staticmethod
    def verify_reset_password_token(token):
        """
        verify password reset token
        :param token: a token generated by 'get_reset_password_token'
        :return: returns users verified token or nothing
        """
        try:
            token_id = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])['reset_password']
        except ValueError:
            return
        return User.query.get(token_id)


class Post(db.Model):
    """
    define posts database structure
    """
    id = db.Column(db.Integer, primary_key=True)
    body = db.Column(db.String(140))
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)
    # connect User and Post database through foreign key relationship
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    language = db.Column(db.String(5))

    def __repr__(self):
        return _("Post %(body)s", body=self.body)


@login.user_loader
def load_user(user_id):
    """
    load user and posts from database
    :param user_id: int or string of unique user_id number
    :return: User
    """
    return User.query.get(int(user_id))

